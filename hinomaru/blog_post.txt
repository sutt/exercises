
Hinomaru intorduces the idea of algorithms with non-trivial data transformation steps

The point is to refactor this puzzle:

This will 
 2. and then we'll investigate if we can make some targetted changes to the problem space and see if the program still runs or if 
 
 
 Things learned so far:
 
	 - using unittest, your function names have to start with the word "test"
	 - python imports are called relative to the directory you invoke python... this is key for importing classes in subdirectory into sibling directories.
	 
	 
Recipes:

	error: Your local changes to the following files would be overwritten by merge:
        hinomaru/hino.py
        hinomaru/utils/utils.py
	Please, commit your changes or stash them before you can merge.
	Aborting
	
	
	>git stash
	>git pull origin master
	>git stash pop
		http://stackoverflow.com/questions/15745045/how-do-i-resolve-git-saying-commit-your-changes-or-stash-them-before-you-can-me
        
Notes:

    https://sidbala.com/h-264-is-magic/
    https://news.ycombinator.com/item?id=12871403
    
    "This is exactly what H.264 does. H.264 splits up the image into macro-blocks - typically 16x16 pixel blocks that it will use for motion estimation. It encodes one static image - typically called an I-frame(Intra frame). This is a full frame - containing all the bits it required to construct that frame. And then subsequent frames are either P-frames(predicted) or B-frames(bi-directionally predicted). P-frames are frames that will encode a motion vector for each of the macro blocks from the previous frame. So a P-frame has to be constructed by the decoder based on previous frames. "

    https://hbr.org/2016/11/the-competitive-landscape-for-machine-intelligence
    
        https://github.com/Microsoft/CNTK https://www.microsoft.com/en-us/research/product/cognitive-toolkit
        http://www.kyndi.com/